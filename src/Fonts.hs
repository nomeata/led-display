module Fonts where

import qualified Data.ByteString as B
import Codec.Picture
import Data.Char
import Data.Bits
import Data.List

import Screen

type Font = (Char -> ScreenElement)

readFont :: IO Font
readFont = do
    Right (ImageRGBA8 i) <- readImage "5x7.png"
    let i' = pixelMap (\ (PixelRGBA8 r _ _ _) -> r) i
    return $ \c ->
        let n = ord c - ord ' '
        in toElem $ cut (6 * n, 0) (5,7) i'

-- thin font
-- http://ardurct.googlecode.com/svn-history/r633/trunk/arduino/libraries/LCD_PCD8544/fonts.cpp
-- Copyright (c) 2010 Laurent Wibaux <lm.wibaux@gmail.com>
-- MIT license
thinfontRaw = B.pack [ 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x03, 0x00, 0x03, 0x1F, 0x0A, 0x1F, 0x1C, 0x14, 0x1F, 0x19, 0x04, 0x13, 0x1C, 0x17, 0x04, 0x00, 0x03, 0x00, 0x0E, 0x1B, 0x11, 0x11, 0x1B, 0x0E, 0x0A, 0x04, 0x0A, 0x04, 0x0E, 0x04, 0x10, 0x0C, 0x00, 0x04, 0x04, 0x04, 0x10, 0x00, 0x00, 0x18, 0x04, 0x03, 0x1F, 0x11, 0x1F, 0x12, 0x1F, 0x10, 0x19, 0x15, 0x17, 0x15, 0x15, 0x0A, 0x07, 0x04, 0x1F, 0x17, 0x15, 0x09, 0x1F, 0x15, 0x1D, 0x01, 0x01, 0x1F, 0x1F, 0x15, 0x1F, 0x17, 0x15, 0x1F, 0x0A, 0x00, 0x00, 0x10, 0x0A, 0x00, 0x04, 0x0A, 0x11, 0x0A, 0x0A, 0x0A, 0x11, 0x0A, 0x04, 0x01, 0x15, 0x03, 0x0E, 0x15, 0x12, 0x1F, 0x05, 0x1F, 0x1F, 0x15, 0x0A, 0x0E, 0x11, 0x11, 0x1F, 0x11, 0x0E, 0x1F, 0x15, 0x11, 0x1F, 0x05, 0x01, 0x1F, 0x11, 0x1D, 0x1F, 0x04, 0x1F, 0x11, 0x1F, 0x11, 0x09, 0x11, 0x1F, 0x1F, 0x04, 0x1B, 0x1F, 0x10, 0x10, 0x1F, 0x02, 0x1F, 0x1F, 0x02, 0x1E, 0x0E, 0x11, 0x0E, 0x1F, 0x05, 0x07, 0x07, 0x05, 0x1F, 0x1F, 0x05, 0x1A, 0x17, 0x15, 0x1D, 0x01, 0x1F, 0x01, 0x1F, 0x10, 0x1F, 0x0F, 0x10, 0x0F, 0x1F, 0x08, 0x1F, 0x1B, 0x04, 0x1B, 0x07, 0x1C, 0x07, 0x19, 0x15, 0x13, 0x1F, 0x11, 0x11, 0x03, 0x04, 0x18, 0x11, 0x11, 0x1F, 0x02, 0x01, 0x02, 0x10, 0x10, 0x10, 0x01, 0x02, 0x00]

thinfont :: Font
thinfont c | n < 0 = blank
           | n >= B.length thinfontRaw `div` 3 = blank
           | otherwise = toElem $ generateScreen (3,5) $ \x y ->
                                    testBit (thinfontRaw `B.index` (n*3+x)) y
    where n = ord c - ord ' '
          blank = toElem $ blankScreen (3,5)

text :: Font -> String -> ScreenElement
text font = hconcat . intersperse (padX 1) . map font

toMinutes :: Font -> Int -> ScreenElement
toMinutes font s | m < 0     = text font "<?"
                 | m > 100   = text font ">"
                 | otherwise = text font $ show m
  where m = s `div` 60
